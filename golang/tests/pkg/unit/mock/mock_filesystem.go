// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aliyun/wuying-agentbay-sdk/golang/pkg/agentbay/interface (interfaces: FileSystemInterface)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	filesystem "github.com/aliyun/wuying-agentbay-sdk/golang/pkg/agentbay/filesystem"
	gomock "github.com/golang/mock/gomock"
)

// MockFileSystemInterface is a mock of FileSystemInterface interface.
type MockFileSystemInterface struct {
	ctrl     *gomock.Controller
	recorder *MockFileSystemInterfaceMockRecorder
}

// MockFileSystemInterfaceMockRecorder is the mock recorder for MockFileSystemInterface.
type MockFileSystemInterfaceMockRecorder struct {
	mock *MockFileSystemInterface
}

// NewMockFileSystemInterface creates a new mock instance.
func NewMockFileSystemInterface(ctrl *gomock.Controller) *MockFileSystemInterface {
	mock := &MockFileSystemInterface{ctrl: ctrl}
	mock.recorder = &MockFileSystemInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileSystemInterface) EXPECT() *MockFileSystemInterfaceMockRecorder {
	return m.recorder
}

// CreateDirectory mocks base method.
func (m *MockFileSystemInterface) CreateDirectory(arg0 string) (*filesystem.FileDirectoryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDirectory", arg0)
	ret0, _ := ret[0].(*filesystem.FileDirectoryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDirectory indicates an expected call of CreateDirectory.
func (mr *MockFileSystemInterfaceMockRecorder) CreateDirectory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDirectory", reflect.TypeOf((*MockFileSystemInterface)(nil).CreateDirectory), arg0)
}

// EditFile mocks base method.
func (m *MockFileSystemInterface) EditFile(arg0 string, arg1 []map[string]string, arg2 bool) (*filesystem.FileWriteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(*filesystem.FileWriteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditFile indicates an expected call of EditFile.
func (mr *MockFileSystemInterfaceMockRecorder) EditFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditFile", reflect.TypeOf((*MockFileSystemInterface)(nil).EditFile), arg0, arg1, arg2)
}

// GetFileInfo mocks base method.
func (m *MockFileSystemInterface) GetFileInfo(arg0 string) (*filesystem.FileInfoResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileInfo", arg0)
	ret0, _ := ret[0].(*filesystem.FileInfoResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileInfo indicates an expected call of GetFileInfo.
func (mr *MockFileSystemInterfaceMockRecorder) GetFileInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileInfo", reflect.TypeOf((*MockFileSystemInterface)(nil).GetFileInfo), arg0)
}

// ListDirectory mocks base method.
func (m *MockFileSystemInterface) ListDirectory(arg0 string) (*filesystem.DirectoryListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDirectory", arg0)
	ret0, _ := ret[0].(*filesystem.DirectoryListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDirectory indicates an expected call of ListDirectory.
func (mr *MockFileSystemInterfaceMockRecorder) ListDirectory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDirectory", reflect.TypeOf((*MockFileSystemInterface)(nil).ListDirectory), arg0)
}

// MoveFile mocks base method.
func (m *MockFileSystemInterface) MoveFile(arg0, arg1 string) (*filesystem.FileWriteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveFile", arg0, arg1)
	ret0, _ := ret[0].(*filesystem.FileWriteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveFile indicates an expected call of MoveFile.
func (mr *MockFileSystemInterfaceMockRecorder) MoveFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveFile", reflect.TypeOf((*MockFileSystemInterface)(nil).MoveFile), arg0, arg1)
}

// ReadFile mocks base method.
func (m *MockFileSystemInterface) ReadFile(arg0 string, arg1 ...int) (*filesystem.FileReadResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadFile", varargs...)
	ret0, _ := ret[0].(*filesystem.FileReadResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockFileSystemInterfaceMockRecorder) ReadFile(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockFileSystemInterface)(nil).ReadFile), varargs...)
}

// ReadMultipleFiles mocks base method.
func (m *MockFileSystemInterface) ReadMultipleFiles(arg0 []string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMultipleFiles", arg0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMultipleFiles indicates an expected call of ReadMultipleFiles.
func (mr *MockFileSystemInterfaceMockRecorder) ReadMultipleFiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMultipleFiles", reflect.TypeOf((*MockFileSystemInterface)(nil).ReadMultipleFiles), arg0)
}

// SearchFiles mocks base method.
func (m *MockFileSystemInterface) SearchFiles(arg0, arg1 string, arg2 []string) (*filesystem.SearchFilesResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFiles", arg0, arg1, arg2)
	ret0, _ := ret[0].(*filesystem.SearchFilesResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFiles indicates an expected call of SearchFiles.
func (mr *MockFileSystemInterfaceMockRecorder) SearchFiles(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFiles", reflect.TypeOf((*MockFileSystemInterface)(nil).SearchFiles), arg0, arg1, arg2)
}

// WriteFile mocks base method.
func (m *MockFileSystemInterface) WriteFile(arg0, arg1, arg2 string) (*filesystem.FileWriteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(*filesystem.FileWriteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteFile indicates an expected call of WriteFile.
func (mr *MockFileSystemInterfaceMockRecorder) WriteFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockFileSystemInterface)(nil).WriteFile), arg0, arg1, arg2)
}
